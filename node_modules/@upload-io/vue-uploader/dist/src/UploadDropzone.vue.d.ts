import { Uploader, UploaderOptions, UploaderResult } from "uploader";
import { PropType } from "vue";
declare const _default: import("vue").DefineComponent<{
    uploader: {
        type: typeof Uploader;
        required: true;
    };
    options: {
        type: PropType<UploaderOptions | undefined>;
        required: false;
    };
    onComplete: {
        type: PropType<((files: UploaderResult[]) => void) | undefined>;
        required: false;
    };
    onUpdate: {
        type: (new (...args: any[]) => ((files: UploaderResult[]) => void) & object) | (() => (files: UploaderResult[]) => void) | {
            (): (files: UploaderResult[]) => void;
            new (): any;
            readonly prototype: any;
        } | ((new (...args: any[]) => ((files: UploaderResult[]) => void) & object) | (() => (files: UploaderResult[]) => void) | {
            (): (files: UploaderResult[]) => void;
            new (): any;
            readonly prototype: any;
        })[] | undefined;
        required: false;
    };
    height: {
        type: StringConstructor;
        required: false;
    };
    width: {
        type: StringConstructor;
        required: false;
    };
}, unknown, unknown, {
    widthOrDefault(): string;
    heightOrDefault(): string;
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    uploader: Uploader;
} & {
    options?: UploaderOptions | undefined;
    onComplete?: ((files: UploaderResult[]) => void) | undefined;
    onUpdate?: ((files: UploaderResult[]) => void) | undefined;
    height?: string | undefined;
    width?: string | undefined;
}>, {}>;
export default _default;
